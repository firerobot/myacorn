package com.myacorn.exercise;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;

public class HelloWorld {

	public static void main (String[] args) {
		System.out.println("Hello World");
	}
	
	public static TreeMap<String, Integer> buildTreeMap(List<String> inputList) {

		TreeMap<String, Integer> treeMap = new TreeMap<String, Integer>(); 
		for (int i = 0; i < inputList.size(); i++) {
			treeMap.put(inputList.get(i), i);
		}
		
//		Iterator<String> iter = treeMap.navigableKeySet().iterator();
//		while (iter.hasNext()) {
//			System.out.println(iter.next());
//		}
		return treeMap;
	}
	
	public static String findGreatestKeyLTE(List<String> inputList, String key) { 
		return buildTreeMap(inputList).floorKey(key);
	}
	
	public static String findLeastKeyGTE(List<String> inputList, String key) { 
		return buildTreeMap(inputList).ceilingKey(key);
	}

/*	
	public static <K,V extends Comparable<? super V>>
	SortedSet<Map.Entry<K,V>> entriesSortedByValues(Map<K,V> map) {
	    SortedSet<Map.Entry<K,V>> sortedEntries = new TreeSet<Map.Entry<K,V>>(
	        new Comparator<Map.Entry<K,V>>() {
	            @Override public int compare(Map.Entry<K,V> e1, Map.Entry<K,V> e2) {
	                int res = e1.getValue().compareTo(e2.getValue());
	                return res != 0 ? res : 1;
	            }
	        }
	    );
	    sortedEntries.addAll(map.entrySet());
	    return sortedEntries;
	}
*/

	//old way
/*
	public static TreeMap<Book, Integer> buildBookTreeMap(List<Book> inputList) {

		TreeMap<Book, Integer> treeMap = new TreeMap<Book, Integer>(new Comparator<Book>() {
			public int compare(Book b1, Book b2) {
//				return b1.getIsbn().compareTo(b2.getIsbn());    //based on ISBN
				return b1.getRank().compareTo(b2.getRank());	//based on Rank but has to be non-primitive type
			}
		});
		
		for (int i = 0; i < inputList.size(); i++) {
			treeMap.put(inputList.get(i), i);
		}
		
		Iterator<Book> iter = treeMap.navigableKeySet().iterator();
		while (iter.hasNext()) {
			System.out.println(iter.next());
		}
		return treeMap;
	}
*/
	
	//new way
	public static TreeMap<Book, Integer> buildBookTreeMap(List<Book> inputList, Comparator<Book> comparator) {

//		TreeMap<Book, Integer> treeMap = new TreeMap<Book, Integer>( (Book b1, Book b2) -> b1.getRank().compareTo(b2.getRank()) );
		TreeMap<Book, Integer> treeMap = new TreeMap<Book, Integer>( Book::compareByRank ); 
			
		for (int i = 0; i < inputList.size(); i++) {
			treeMap.put(inputList.get(i), i);
		}
		
		treeMap.navigableKeySet().forEach(System.out::println);
		
		return treeMap;
	}
}

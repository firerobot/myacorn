package com.myacorn.exercise;

import static org.junit.Assert.*;

import java.util.Arrays;
import java.util.List;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.contrib.java.lang.system.StandardOutputStreamLog;

public class HelloWorldTest {
	@Rule
	public final StandardOutputStreamLog log = new StandardOutputStreamLog();
	
	private List<String> greekAlphabetList;
	private List<Book> bookList;
	
	@Before
	public void initialise() {
		greekAlphabetList = Arrays.asList
				("theta", "delta", "omega", "beta", "alpha", "zeta", "pi", "alpha");
		
		Author author1 = new Author("Buffet", "Warren", "USA");
		Book book1 = new Book(author1, "How to invest your money", "972-1-800", 1985, 1);
		bookList.add(book1);
		
		Author author2 = new Author("Bloch", "Joshua", "USA");
		Book book2 = new Book(author2, "Effective Java", "600-3-758", 1992, 92);
		bookList.add(book2);
		
		Book book3 = new Book(author2, "Effective Java Second Edition", "600-3-999", 2012, 92);
		bookList.add(book3);
	}
	
	@Test
	public void test() {
		String[] args = new String[] {"test"};
		HelloWorld.main(args);
		assertEquals("Hello World\r\n", log.getLog());
	}
	
	@Test
	public void testTreeMapSize() {
		//tree map only contains the unique
		assertEquals(7, HelloWorld.buildTreeMap(greekAlphabetList).size());
	}
	
	@Test
	public void testFindGreatestKeyLTEWithNoMatchingKey() {
		//find the key in the tree map that is before the search key when
		//sorted in ascending order
		assertEquals("delta", HelloWorld.findGreatestKeyLTE(greekAlphabetList, "gamma"));
	}
	
	@Test
	public void testFindGreatestKeyLTEWithMatchingKey() {
		assertEquals("pi", HelloWorld.findGreatestKeyLTE(greekAlphabetList, "pi"));
	}
	
	@Test
	public void testFindLeastKeyGTEWithNoMatchingKey() {
		//find the key in the tree map that is after the search key when
		//sorted in ascending order
		assertEquals("omega", HelloWorld.findLeastKeyGTE(greekAlphabetList, "gamma"));
	}

	@Test
	public void testFindLeastKeyGTEWithMatchingKey() {
		assertEquals("zeta", HelloWorld.findLeastKeyGTE(greekAlphabetList, "zeta"));
	}

}
